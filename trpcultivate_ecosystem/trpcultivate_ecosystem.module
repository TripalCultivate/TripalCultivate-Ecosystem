<?php

/**
 * @file
 * Contains all hook implementations for this module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\tripal_layout\Controller\TripalEntityUILayoutController;

/**
 * Implements hook_help().
 */
function trpcultivate_ecosystem_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Provides the module overview in the help tab.
    case 'help.page.trpcultivate_ecosystem':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';

      $output .= '<p>' . t('This module provides content types, fields and importers focused on surveying ecosystem plants and insects.') . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_page().
 */
function trpcultivate_ecosystem_preprocess_page(&$variables) {
  // Get the route for the current page.
  $route_name = \Drupal::routeMatch()->getRouteName();
  // If this is a page related to listing of TripalEntityTypes then we want
  // to add the following CSS library.
  $tripal_entity_type_routes = ['entity.tripal_entity.add_page', 'entity.tripal_entity_type.collection'];
  if (in_array($route_name, $tripal_entity_type_routes)) {
    $variables['#attached']['library'][] = 'trpcultivate_ecosystem/tripal_entity_type';
  }
}

/**
 * Insert terms needed by this module into the default chado instance.
 *
 * Expected but not required to be run by a Tripal Job.
 */
function trpcultivate_ecosystem_install_terms() {
  $config_id = 'trpcultivate_ecosystem_terms';
  $terms_setup = \Drupal::service('tripal_chado.terms_init');
  $terms_setup->installTerms($config_id);
}

/**
 * Import content type collections needed by this module.
 *
 * Expected but not required to be run by a Tripal Job.
 */
function trpcultivate_ecosystem_import_contenttypes() {

  $collections = [
    'trpcultivate_ecosystem',
  ];

  // Import the content types.
  $content_type_setup = \Drupal::service('tripal.tripalentitytype_collection');
  $content_type_setup->install($collections);

  // Import the fields.
  $fields = \Drupal::service('tripal.tripalfield_collection');
  $fields->install($collections);
  // Create Markup fields based on the twig files in /templates/markup_field.
  trpcultivate_ecosystem_create_markup_fields();

  // Create Drupal Reference (i.e. relationship) fields.
  trpcultivate_ecosystem_create_relationship_fields();

  // Apply Layout and tweak as needed.
  trpcultivate_ecosystem_apply_layout();
}

/**
 * Create Markup fields based on the twig files in /templates/markup_field.
 */
function trpcultivate_ecosystem_create_markup_fields() {

  $field_id_prefix = 'instruct_exp_';

  // Get a list of all the files in /templates/markup_field.
  $directory = \Drupal::service('extension.list.module')->getPath('trpcultivate_ecosystem') . '/templates/markup_field';
  if (is_dir($directory)) {
    $files = \Drupal::service('file_system')->scanDirectory($directory, '/.*.twig/');
    foreach ($files as $f) {
      [$content_type, $field_id] = explode('.', $f->name);
      if (!empty($field_id)) {
        $field_id = $field_id_prefix . $field_id;
        $full_file_path = DRUPAL_ROOT . '/' . $f->uri;

        // Set the markup value to render full HTML on the contents of the file.
        // This render array will be rendered by the Markup field.
        $markup_value = [
          'value' => file_get_contents($full_file_path),
          'format' => 'full_html',
        ];
        $field_storage = FieldStorageConfig::loadByName('tripal_entity', $field_id);
        if (empty($field_storage)) {
          $field_storage = FieldStorageConfig::create([
            'field_name' => $field_id,
            'entity_type' => 'tripal_entity',
            'type' => 'markup',
            'cardinality' => 1,
            'revisionable' => FALSE,
            'provider' => 'trpcultivate_ecosystem',
            'settings' => [],
          ]);
          $field_storage->save();
        }

        $field = FieldConfig::loadByName('tripal_entity', $content_type, $field_id);
        if (empty($field)) {
          $field = FieldConfig::create([
            'field_storage' => $field_storage,
            'bundle' => $content_type,
            'label' => $field_id,
            'settings' => [
              'markup' => $markup_value,
            ],
          ]);
        }
        else {
          $field->setSetting('markup', $markup_value);
        }

        // Set the cvterm.
        $field->setThirdPartySetting('tripal', 'termIdSpace', 'NCIT');
        $field->setThirdPartySetting('tripal', 'termAccession', 'C63615');
        $field->save();

        // Assign widget settings for the default form mode.
        $display_repository = \Drupal::service('entity_display.repository');
        $display_repository->getFormDisplay('tripal_entity', $content_type)
          ->setComponent($field_id, [
            'type' => 'markup',
          ])
          ->save();
      }
    }
  }
}

/**
 * Create Drupal Reference (i.e. relationship) fields.
 *
 * @todo replace with Chado Relationships once widget/field is available.
 */
function trpcultivate_ecosystem_create_relationship_fields() {

  /**
   * @var array
   * An array describing the relationship fields we need to create.
   * The first level of the array has the key being the content type to create
   * the fields on and an array of fields to create.
   *
   * The array of fields to create has the key being the id of the field
   * and the value is an array describing the field to create:
   * - target: an array of existing content types that are the target of this
   *   field or more specifically, whose content will populate the drop down.
   * - label: the title of the field.
   * - description: the field description/help text.
   */
  $relationships_needed = [
    'ecosystem_survey' => [
      'field_grant' => [
        'target' => [
          'research_grant' => 'research_grant',
        ],
        'label' => 'Funding Grant',
        'description' => 'Indicate all grants which provide funding for this experiment. You may need to confirm this information with your PI.',
        'termIdSpace' => 'OBI',
        'termAccession' => '0001636',
      ],
      'field_study' => [
        'target' => [
          'research_study' => 'research_study',
        ],
        'label' => 'Parent Research Study',
        'description' => 'Research studies are meant to answer broader questions and will often use multiple experiments in order to do that. You should indicate the research studies that this experiment was designed to be used for.',
        'termIdSpace' => 'SIO',
        'termAccession' => '001066',
      ],
      'field_sites' => [
        'target' => [
          'grassland_site' => 'grassland_site',
        ],
        'label' => 'Grassland Sites',
        'description' => 'Indicate the sites being surveyed as part of this experiment. Note: you must register the "Native Grassland Sites" with this resource first.',
        'termIdSpace' => 'local',
        'termAccession' => 'grassland_site',
      ],
    ],
    'grassland_site' => [
      'field_surveys' => [
        'target' => [
          'ecosystem_survey' => 'ecosystem_survey',
        ],
        'label' => 'Ecosystem Survey',
        'description' => 'Indicate any ecosystem surveys being done on this native grassland site.',
        'termIdSpace' => 'local',
        'termAccession' => 'grassland_site',
      ],
    ],
  ];
  foreach ($relationships_needed as $base_content_type => $fields2create) {
    foreach ($fields2create as $field_id => $field_details) {

      $field_storage = FieldStorageConfig::loadByName('tripal_entity', $field_id);
      if (!$field_storage) {
        FieldStorageConfig::create([
          'field_name' => $field_id,
          'entity_type' => 'tripal_entity',
          'type' => 'entity_reference',
          'cardinality' => -1,
          'settings' => [
            'target_type' => 'tripal_entity',
          ],
        ])->save();
      }

      $field = FieldConfig::loadByName('tripal_entity', $base_content_type, $field_id);
      if (!$field) {
        $field = FieldConfig::create([
          'field_name' => $field_id,
          'entity_type' => 'tripal_entity',
          'bundle' => $base_content_type,
          'label' => $field_details['label'],
          'description' => $field_details['description'],
          'cardinality' => -1,
          'settings' => [
            'handler' => 'default:tripal_entity',
            'handler_settings' => [
              'target_bundles' => $field_details['target'],
              'sort' => [
                'field' => 'title',
                'direction' => 'ASC',
              ],
              'auto_create' => FALSE,
            ],
          ],
        ]);
      }

      // Set the cvterm.
      $field->setThirdPartySetting('tripal', 'termIdSpace', $field_details['termIdSpace']);
      $field->setThirdPartySetting('tripal', 'termAccession', $field_details['termAccession']);
      $field->save();
    }
  }

}

/**
 * Automatically apply the Tripal Layouts and tweak as needed.
 */
function trpcultivate_ecosystem_apply_layout() {
  $entity_type_manager = \Drupal::service('entity_type.manager');

  $bundles = ['ecosystem_survey', 'grassland_site'];
  foreach ($bundles as $bundle) {
    $content_type = $entity_type_manager->getStorage('tripal_entity_type')->load($bundle);

    // Automatically apply both layouts.
    $controller = new TripalEntityUILayoutController();
    $controller->applyViewLayout($content_type);
    $controller->applyFormLayout($content_type);

    // Now modify the form display.
    $config_entity_storage = $entity_type_manager->getStorage('entity_form_display');
    $display = $config_entity_storage->load('tripal_entity.' . $bundle . '.default');

    // -- Ensure only the objectives vertical tab is open by default.
    $field_groups = $display->getThirdPartySettings('field_group');
    foreach ($field_groups as $id => $group) {
      if ($group['format_type'] === 'tab' && $id !== 'exp-tab-objectives') {
        $group['format_settings']['formatter'] = 'closed';
        $display->setThirdPartySetting('field_group', $id, $group);
      }
    }

    // -- Set a number of properties to use the "Short Text" widget.
    $property_fields = [];
    if ($bundle == 'grassland_site') {
      $property_fields = ['site_location'];
    }
    foreach ($property_fields as $component_name) {
      $options = $display->getComponent($component_name);
      $options['type'] = 'chado_property_string_widget_default';
      $options['settings'] = [];
      $display->setComponent($component_name, $options);
    }

    // -- Set a number of properties to be smaller with no format toolbar.
    $property_fields = [];
    if ($bundle == 'ecosystem_survey') {
      $property_fields = ['exp_objectives', 'exp_hypothesis'];
    }
    foreach ($property_fields as $component_name) {
      $options = $display->getComponent($component_name);
      $options['settings']['filter_format'] = 'plain_text';
      $options['settings']['num_rows'] = 2;
      $display->setComponent($component_name, $options);
    }

    // -- Finally save it.
    $display->save();
  }
}
